-------------------------------------------------
MAVEN <INST DETAILS/ARTIFACTORY/POM>
-------------------------------------------------
- Maven is a Java tool, so you must have Java installed in order to proceed.
- Maven 3.3 requires JDK 1.7 or above to execute - it still allows you to build against 1.3 and other JDK versions by Using Toolchains
- Use a source archive if you intend to build Maven yourself.
- JAVA_HOME,PATH [Test: mvn --version]
- Maven configuration occurs at 3 levels:*****
    Project - most static configuration occurs in pom.xml
    Installation - this is configuration added once for a Maven installation
    User - this is configuration specific to a particular user
- Repositories to deploy to are defined in a project in the <distributionManagement> section ***** (Sections of pom.xml)
- Firewalls and Anti-virus *****(Clarify --- Impact: Dependencies may NOT be made available to the local maven repository)
- Java Versions	

********************************************************************************************
- http://javapapers.com/jee/download-install-and-setup-maven/ (IMP; Refer for Java as well)
********************************************************************************************
	0. Maven - Salient Features:
		- Maven is a Java tool
		- Maven is actually a plugin execution framework where every task is actually done by plugins.
		- Dependency Management and Build Management
		- Maven uses Convention over Configuration which means developers are not required to create build process themselves.
			- Re-use of artifacts (across projects)
			- Defines a standard project folder structure (projects can be re-used across IDEs as conventions and processes are followed)


		Item 			Default
		----			-------
		source code 		${basedir}/src/main/java
		resources 		${basedir}/src/main/resources
		Tests 			${basedir}/src/test
		distributable JAR 	${basedir}/target
		Complied byte code 	${basedir}/target/classes

	1. Maven Build LifeCycle (http://www.tutorialspoint.com/maven/maven_build_life_cycle.htm - V.V.V. IMP)
		What is Build Lifecycle?
		A Build Lifecycle is a well defined sequence of phases which define the order in which the goals are to be executed. Here phase represents a stage in life cycle.

        	There are three built-in build life cycle ‘clean’, ‘default’ and ‘site’. A life cycle has multiple phases. For example, ‘default’ lifecycle has following phases (listed only the important phases),

	    	compile – compiles the source code
	    	test    – executes unit test cases
	    	package – bundles the compiled code (Ex: war / jar)
	    	install – stores the built package in local Maven repository
	    	deploy  – store in remote repository for sharing
		
		So to go through the above phases, we just have to call one command:
		mvn <phase> { Ex: mvn install }
		For the above command, starting from the first phase, all the phases are executed sequentially till the ‘install’ phase.

	2. Maven Repository
		There are two types of repositories, local and remote. Local maven repository is in the user’s system. It stores the copy of the dependent files that we use in our project as dependencies. 
	        Remote maven repository is setup by a third party to provide access and distribute dependent files. Ex: repo.maven.apache.org
		Clarification: Project repository and custom repository
		Maven Dependency Search Sequence
                

	3. Maven pom.xml (URL: http://www.tutorialspoint.com/maven/maven_pom.htm)
		This is roughly equivalent to the ANT build xml file. Maven pom.xml contains the configuration settings for a project build. Generally we define the project dependencies (Ex: dependent jar files for a project), 
		maven plugins to execute and project description/version etc.

		A pom will minimum have the following information,
		    modelVersion
		    groupId
		    artifactId
		    version

		Example of a simplest pom.xml,
		<project>
			<modelVersion>4.0.0</modelVersion>
			<groupId>com.mycompany.app</groupId>
			<artifactId>my-app</artifactId>
			<version>1</version>
		</project>

	4. Maven Dependencies
		There is an element available for declaring dependencies in project pom.xml This is used to define the dependencies that will be used by the project. Maven will look for these dependencies when executing in the local 
		maven repository. If not found, then Maven will download those dependencies from the remote repository and store it in the local maven repository.Example declaring junit and log4j as project dependencies,

		 <dependencies>
    			<dependency>
      				<groupId>junit</groupId>
      				<artifactId>junit</artifactId>
      				<version>3.8.1</version>
      				<scope>test</scope>
    			</dependency>
    			<dependency>
      				<groupId>log4j</groupId>
      				<artifactId>log4j</artifactId>
      				<version>1.2.12</version>
      				<scope>compile</scope>
    			</dependency>
  		</dependencies>
		scope – describes under which context this dependency will be used.


	5. Maven Plugins (http://www.tutorialspoint.com/maven/maven_plugins.htm) *****
		Maven is actually a plugin execution framework where every task is actually done by plugins. Maven Plugins are generally used to :
		    create jar file
		    create war file
		    compile code files
		    unit testing of code
		    create project documentation
		    create project reports
		    A plugin generally provides a set of goals and which can be executed using following syntax:
		    mvn [plugin-name]:[goal-name]


		All the execution in Maven is done by plugins. A plugin is mapped to a phase and executed as part of it. A phase is mapped to multiple goals. Those goals are executed by a plugin. We can directly invoke a specific goal 
		while Maven execution. A plugin configuration can be modified using the plugin declaration.

		An example for Maven plugin is ‘compiler’, it compiles the java source code. This compiler plugin has two goals compiler:compile and compiler:testCompile.

		Using the configuration element, we can supply arguments to the plugin.


		<build>
 			<finalName>springexcelexport</finalName>
 				<plugins>
	 				<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>2.2</version>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.16</version>
						<configuration>
							<skipTests>true</skipTests>
						</configuration>
					</plugin>
		</build>


	6. Maven Project Structure
   		Maven uses a convention for project folder structure. If we follow that, we need not describe in our configuration setting, what is located where. Maven knows from where to pick the source files, test cases etc.

	7. First Maven Project
		Let us create our first maven project. Hope you have setup Maven already. In Maven we have ‘Archetype’. It is nothing by a template for projects. Maven provides templates to start a project and using this we can quickly 		start a Maven project. Execute the following command in cmd prompt,

		mvn archetype:generate -DgroupId=com.javapapers.sample -DartifactId=first-mavenapp -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

		This will create a sample Maven project skeleton using we can start building the application.We will get a a pom.xml and let us use that to build the newly created Maven project. Go inside the newly created Maven project 		root and execute the command (this is where the pom.xml is available),

		mvn package

		Now this will execute all the Maven phases till the ‘package’ phase. That is, Maven will compile, verify and build the jar file and put it in target folder under the project.

		You can experiment with these Archetypes, maven-archetype-j2ee-simple and maven-archetype-webapp.



https://www.google.com/?gws_rd=ssl#q=learn%20maven%20in%205%20minutes
https://maven.apache.org/guides/getting-started/
https://cwiki.apache.org/confluence/display/MAVEN/Tutorial%3A+Build+a+JAR+file+with+Maven+in+5+minutes
http://stackoverflow.com/questions/20165674/maven-3-maven-in-5-minutes-mvn-archetypegenerate-command-not-working
---------------------------------------------------------------------
http://javapapers.com/jee/download-install-and-setup-maven/
http://www.tutorialspoint.com/maven/
---------------------------------------------------------------------
